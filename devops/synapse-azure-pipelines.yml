# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - db-projects/synapse-sqlops/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/synapse-sqlops/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  projectName: 'synapse-sqlops'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
    - task: CopyFiles@2
      displayName: 'Move Solution Scripts to Staging Directory'
      inputs:
        SourceFolder: '$(agent.builddirectory)\s'
        Contents: '**\bin\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
    
    - task: SqlAzureDataWarehouseDacpacDeployment@1
      displayName: "What Will Deploy"
      inputs:
        azureSubscription: '$(azureSubscription)'
        AuthenticationType: 'server'
        ServerName: '$(serverName)'
        DataWarehouse: '$(dataWarehouseName)'
        SqlUsername: '$(sqluser)'
        SqlPassword: '$(sqlpassword)'
        deployType: 'DacpacTask'
        DeploymentAction: 'Script'
        DacpacFile: '$(build.artifactstagingdirectory)/$(projectName)/bin/Release/$(projectName).dacpac'
        AdditionalArguments: '/p:GenerateSmartDefaults=True'
        IpDetectionMethod: 'AutoDetect'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)\GeneratedOutputFiles\'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifact: 'DBDeployment'
        publishLocation: 'pipeline'    


- stage: ReleaseQA
  jobs:
  - deployment: DeployDB
    displayName: "deploy Database"
    pool:
      vmImage: 'windows-latest'
    environment: 'QAEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'DBDeployment'
              targetPath: '$(System.DefaultWorkingDirectory)/DBDeployment'

          - task: CmdLine@2
            inputs:
              script: 'dir $(System.DefaultWorkingDirectory) /S'


          - task: SqlAzureDataWarehouseDacpacDeployment@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              AuthenticationType: 'server'
              ServerName: '$(serverName)'
              DataWarehouse: '$(dataWarehouseName)'
              SqlUsername: '$(sqluser)'
              SqlPassword: '$(sqlpassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(System.DefaultWorkingDirectory)\DBDeployment\$(projectName)\bin\Release\$(projectName).dacpac'
              AdditionalArguments: '/p:GenerateSmartDefaults=True /p:BlockOnPossibleDataLoss=True /p:BlockWhenDriftDetected=True'
              IpDetectionMethod: 'AutoDetect'
